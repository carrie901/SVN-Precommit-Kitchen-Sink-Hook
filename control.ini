;########################################################################
; PRE-COMMIT-KITCHEN-SINK-HOOK CONTROL FILE
;########################################################################
;
; This file controls the actions of the pre-commit-kitchen-sink-hook.pl
; file. This hook can check for write permissions on file, make sure
; properties are set correctly, make sure banned file names are not
; allowed, and even can check revision properties on a commit. (However,
; earlier versions of Subversion can't do that. For those versions, we
; only check the svn:log revision property.
;
; This file is divided into four sections. The order of the sections, or
; even having to keep each section in order is not important. However,
; this file does work from top to bottom, so if Group "A" contains Group
; "B", you have to make sure Group "B" is defined first.
;
;########################################################################

;########################################################################
; LDAP GROUPS
;
; If you have LDAP access, you can use LDAP to define your groups for
; this pre-commit hook instead of defining groups below.
;
; Groups are a way to define a group of users, so you're not specifying
; individual users permissions for each line. Remember to put a "@"
; in front of the group name, so the pre-commit trigger knows this
; is a group and not an individual.
;
; Note: Group "@ALL" is a special group that includes all users
;
[ldap ldap://nycdc01.travelclick.net:389]
user_dn = CN=David Weintraub,OU=New York,OU=TravelClick Users,OU=TravelClick,DC=TRAVELCLICK,DC=NET
base = DC=TRAVELCLICK,DC=NET
search_base=OU=Travelclick Users,OU=TravelClick,dc=travelclick,dc=net
password = swordfish
username_attr = sAMAccountName
group_attr = memberOf
;
;########################################################################

;########################################################################
; GROUP SECTIONS
;
; If you don't use LDAP groups, you can define groups of users via
; group sections.
;
; Groups are a way to define a group of users, so you're not specifying
; individual users permissions for each line. Remember to put a "@"
; in front of the group name, so the pre-commit trigger knows this
; is a group and not an individual.
;
; Note: Group "@ALL" is a special group that includes all users
;
[group manager]
users = winky, blinky, nod, dweintraub

[group admin]
users = bob, ted, carol, alice @manager

[group dev]
users = peter, paul, mary @admin

;
;########################################################################

;########################################################################
; FILE SECTION
;########################################################################
;
; File names can be specified using Ant globbing patterns or via Perl
; regular expressions. Globs are always anchored on the front and back.
; In globbing "*" means any number of characters WITHIN A DIRECTORY, "?"
; means a single letter match, and "**" means any number of
; subdirectories.
;
; The "match" parameter allows you to specify a regular expression as a
; file name. The "file" parameter allows you to specify a glob
; expression as a file name. You can only use on or the other in each
; definition.
;
; There are four types of access "read-only", "read-write", "no-delete" and
; "add-only". There is no way to take away read permission with a
; post-commit hook. The access of "add-only" is useful for tags. This
; allows you to create a tag, but won't allow you to make changes and
; commit those changes.
;
; The string "<USER>" (with angle brackets, but no quotes) can be used to
; specify a directory name that's the same as the user's login account. This
; is good for private user directories
;
[file You don't have permission to commit changes to this file]
match = .*
access = read-only
users = @ALL

[file Allow all access to the trunk]
file = /trunk/**
access = read-write
users = @ALL

[file Allow all access to branches]
file = /branches/**
access = read-write
users = @ALL

[file Users can only modify their own watch files]
file = /watches/*.cfg
access = read-only
users = @ALL

[file Users can only modify their own watch files]
file = /watches/<USER>.cfg
access = read-write
users = @ALL

[file Tags can only be created, but not modified]
file = /tags/**
access = read-only
users = @ALL

;########################################################################
; Very important! Make sure there's a final slash on the end of the
; glob expression. That final slash means you can only add directories
; to the tags directory and not mere files.
;
[file Tags can only be created, but not modified]
file = /tags/*/
access = add-only
users = @ALL

[file Users of ADMIN group  have complete access to everything]
match = .*
access = read-write
users = @ADMIN

;########################################################################
; BANNED NAMES
;
; There are certain file names that can cause trouble. When a user adds a
; name, we check it to make sure it's a legal name.

[ban File name contains illegal Windows characters in it]
match = (\\|:|\*|\?|\"|<|>|\|)

[ban Illegal MS-DOS Filenames are Not Allowed]
match = /(con|aux|prn|com[1-4])\.?

[ban Filenames Cannot Contain Chars That Cause Problems in Subversion]
match = @

[ban Filenames Cannot Contain Spaces]
match = ( )
;
;########################################################################

;########################################################################
; PROPERTIES
; 
; This section allows you to specify properties that must be placed on
; particular files.
;
[property Shell scripts require the property "svn:eol-style" to be set to "LF"]
file = **/*.k?sh
property = svn:eol-style
value = LF
type = string

[property Scripts require property "svn:eol-style" to be set to "native"]
match = \.(pl|pm|py)$
property = svn:eol-style
value = native
type = string

[property Executable scripts require property "svn:executable" on them]
match = \.(sh|ksh|pl|pm|py)$
property = svn:executable
value = .*
type = regex
;
;########################################################################

;########################################################################
; REVISION PROPERTIES
;
; In older versions of Subversion, only the commit comment (svn:log) can
; be checked. In newer version of Subversion (since 1.5) you can specify
; any revision property you want.
;
; Format for check in comment:
;     ADS-1234: This is my comment
;     ADS-1345,AIM-3424,RBR-1231: This is my comment
;     NONE: This is my comment
;
; Comment length after Jira tickets must be at least 10 characters.
;
[revprop Jira issue IDs must be prefixed to commit comment followed by ":"]
property = svn:log
value = ^((NONE)|([A-Z]{3,5}-[0-9]+,?)+):\s+.{10,}
type = regex
;
;########################################################################
